name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/key.pem
          chmod 600 ~/.ssh/key.pem
          echo -e "Host ec2\n\tHostName ${{ secrets.EC2_HOST }}\n\tUser ec2-user\n\tIdentityFile ~/.ssh/key.pem\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - name: Deploy to EC2
        run: |
          ssh ec2 '
            # Create and navigate to project directory
            mkdir -p /home/ec2-user/app/Xcel-B2B
            cd /home/ec2-user/app/Xcel-B2B

            # Setup Git
            git config --global credential.helper store
            echo "https://Riteshk-007:${{ secrets.GH_TOKEN }}@github.com" > ~/.git-credentials
            chmod 600 ~/.git-credentials

            # Initialize or update git
            if [ ! -d .git ]; then
              git init
              git remote add origin https://Riteshk-007:${{ secrets.GH_TOKEN }}@github.com/Riteshk-007/Xcel-B2B.git
            else
              git remote set-url origin https://Riteshk-007:${{ secrets.GH_TOKEN }}@github.com/Riteshk-007/Xcel-B2B.git
            fi

            # Backup env files
            [ -f "server/.env" ] && cp server/.env server/.env.backup
            [ -f "client/.env" ] && cp client/.env client/.env.backup

            # Fetch latest code
            git fetch origin main
            git checkout -f main
            git reset --hard origin/main

            # Restore env files
            [ -f "server/.env.backup" ] && cp server/.env.backup server/.env
            [ -f "client/.env.backup" ] && cp client/.env.backup client/.env

            # Backend deployment
            cd server
            echo "Installing backend dependencies..."
            [ -d "node_modules" ] && rm -rf node_modules
            npm install --no-audit --no-fund --silent

            echo "Generating Prisma client..."
            npx prisma generate

            # Restart backend
            if pm2 describe backend > /dev/null; then
              pm2 reload backend
            else
              pm2 start index.js --name backend
            fi

            # Frontend deployment
            cd ../client
            echo "Installing frontend dependencies..."
            [ -d "node_modules" ] && rm -rf node_modules
            [ -d ".next" ] && rm -rf .next
            npm install --no-audit --no-fund --silent

            echo "Building frontend..."
            npm run build

            # Restart frontend
            if pm2 describe frontend > /dev/null; then
              pm2 reload frontend
            else
              pm2 start npm --name frontend -- start
            fi

            # Save PM2 config
            pm2 save --force

            # Final status
            pm2 list
          '
