name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Git Credentials
        run: |
          git config --global credential.helper store
          echo "https://${{ secrets.GH_TOKEN }}@github.com" > ~/.git-credentials

      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Create ecosystem.config.js
        run: |
          echo "module.exports = {
            apps: [
              {
                name: 'backend',
                script: 'index.js',
                env: {
                  PORT: 4000,
                  CORS_ORIGIN: '${{ secrets.CORS_ORIGIN }}',
                  ACCESS_JWT_SECRET: '${{ secrets.ACCESS_JWT_SECRET }}',
                  DATABASE_URL: '${{ secrets.DATABASE_URL }}'
                }
              }
            ]
          }" > server/ecosystem.config.js

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          command_timeout: "20m"
          script: |
            echo "====== Starting Deployment ======"

            # Navigate to project directory
            cd /home/ec2-user/app/Xcel-B2B
            echo "Current directory: $(pwd)"

            # Backup env files
            echo "Backing up env files..."
            cp server/.env server/.env.backup || true
            cp client/.env client/.env.backup || true

            # Configure Git
            git config --global credential.helper store
            echo "https://${{ secrets.GH_TOKEN }}@github.com" > ~/.git-credentials

            # Clear Git cache and pull changes
            echo "Fetching latest changes..."
            git checkout main
            git fetch origin main
            git reset --hard origin/main
            git clean -f -d

            # Restore env files
            echo "Restoring env files..."
            cp server/.env.backup server/.env || true
            cp client/.env.backup client/.env || true

            # Backend Deployment (without stopping previous)
            echo "Setting up backend..."
            cd server
            rm -rf node_modules
            rm -f package-lock.json
            echo "Installing backend dependencies..."
            npm cache clean --force
            npm install
            echo "Generating Prisma client..."
            npx prisma generate

            # Start new backend instance before stopping old one
            echo "Starting new backend instance..."
            pm2 start index.js --name backend-new || true

            # Wait for new instance to be ready
            sleep 10

            # Stop old backend instance
            pm2 delete backend || true
            pm2 rename backend-new backend || true

            # Frontend Deployment
            echo "Setting up frontend..."
            cd ../client
            rm -rf node_modules .next
            rm -f package-lock.json
            echo "Installing frontend dependencies..."
            npm cache clean --force
            npm install
            echo "Building frontend..."
            npm run build

            # Start new frontend instance
            echo "Starting new frontend instance..."
            pm2 start npm --name frontend-new -- start

            # Wait for new instance to be ready
            sleep 10

            # Stop old frontend instance
            pm2 delete frontend || true
            pm2 rename frontend-new frontend || true

            # Save PM2 config
            echo "Saving PM2 configuration..."
            pm2 save

            # No need to restart Nginx unless config changed
            # echo "Restarting Nginx..."
            # sudo systemctl restart nginx || true

            # Final status check
            echo "Checking deployment status..."
            pm2 list
            echo "====== Deployment Complete ======"
